VARIABLE_TYPE	String
IDENTIFIER	lexical
TERMINATING_SYMBOL	;
VARIABLE_TYPE	boolean
IDENTIFIER	syntax
TERMINATING_SYMBOL	;
KEYWORD	class
IDENTIFIER	project
LBRACE	{
VARIABLE_TYPE	String
IDENTIFIER	submitlexical
LPAREN	(
VARIABLE_TYPE	String
IDENTIFIER	lexical
RPAREN	)
LBRACE	{
KEYWORD	if
LPAREN	(
BOOLEAN_STRING	true
COMPARISON_OPERATOR	<
BOOLEAN_STRING	false
RPAREN	)
LBRACE	{
RBRACE	}
KEYWORD	else
LBRACE	{
RBRACE	}
KEYWORD	return
IDENTIFIER	lexical
TERMINATING_SYMBOL	;
RBRACE	}
VARIABLE_TYPE	char
IDENTIFIER	submitsyntax
LPAREN	(
VARIABLE_TYPE	boolean
IDENTIFIER	syntax
RPAREN	)
LBRACE	{
KEYWORD	while
LPAREN	(
BOOLEAN_STRING	true
COMPARISON_OPERATOR	==
BOOLEAN_STRING	true
RPAREN	)
LBRACE	{
IDENTIFIER	syntax
ASSIGNMENT_OPERATOR	=
LPAREN	(
SIGNED_INTEGER	1
ARITHMETIC_OPERATOR	+
SIGNED_INTEGER	3
RPAREN	)
ARITHMETIC_OPERATOR	*
LPAREN	(
SIGNED_INTEGER	4
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	2
RPAREN	)
TERMINATING_SYMBOL	;
RBRACE	}
KEYWORD	return
IDENTIFIER	syntax
TERMINATING_SYMBOL	;
RBRACE	}
VARIABLE_TYPE	int
IDENTIFIER	getscore
LPAREN	(
VARIABLE_TYPE	String
IDENTIFIER	lexical
SEPERATING_SYMBOL	,
VARIABLE_TYPE	boolean
IDENTIFIER	syntax
RPAREN	)
LBRACE	{
KEYWORD	return
IDENTIFIER	A
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
