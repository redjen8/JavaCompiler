IDENTIFIER	public
KEYWORD	class
IDENTIFIER	Bishop
IDENTIFIER	extends
IDENTIFIER	Piece
LBRACE	{
IDENTIFIER	public
IDENTIFIER	Bishop
LPAREN	(
VARIABLE_TYPE	int
IDENTIFIER	col
RPAREN	)
LBRACE	{
IDENTIFIER	color
ASSIGNMENT_OPERATOR	=
IDENTIFIER	col
TERMINATING_SYMBOL	;
IDENTIFIER	name
ASSIGNMENT_OPERATOR	=
IDENTIFIER	BISHOP
TERMINATING_SYMBOL	;
IDENTIFIER	nameS
ASSIGNMENT_OPERATOR	=
LITERAL_STRING	Bishop
TERMINATING_SYMBOL	;
KEYWORD	if
LPAREN	(
IDENTIFIER	players
COMPARISON_OPERATOR	==
SIGNED_INTEGER	1
RPAREN	)
IDENTIFIER	team
ASSIGNMENT_OPERATOR	=
IDENTIFIER	color
TERMINATING_SYMBOL	;
KEYWORD	else
LBRACE	{
KEYWORD	if
LPAREN	(
IDENTIFIER	color
COMPARISON_OPERATOR	==
IDENTIFIER	BLACK
RPAREN	)
IDENTIFIER	team
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	1
TERMINATING_SYMBOL	;
KEYWORD	else
IDENTIFIER	team
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	2
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
IDENTIFIER	public
IDENTIFIER	ArrayList
COMPARISON_OPERATOR	<
IDENTIFIER	Position
COMPARISON_OPERATOR	>
IDENTIFIER	getMovement
LPAREN	(
IDENTIFIER	Board_Master
IDENTIFIER	board
SEPERATING_SYMBOL	,
IDENTIFIER	Position
IDENTIFIER	now
RPAREN	)
LBRACE	{
VARIABLE_TYPE	int
IDENTIFIER	x
ASSIGNMENT_OPERATOR	=
IDENTIFIER	getX
LPAREN	(
RPAREN	)
TERMINATING_SYMBOL	;
VARIABLE_TYPE	int
IDENTIFIER	y
ASSIGNMENT_OPERATOR	=
IDENTIFIER	getY
LPAREN	(
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	ArrayList
COMPARISON_OPERATOR	<
IDENTIFIER	Position
COMPARISON_OPERATOR	>
IDENTIFIER	go
ASSIGNMENT_OPERATOR	=
IDENTIFIER	new
IDENTIFIER	ArrayList
COMPARISON_OPERATOR	<
IDENTIFIER	Position
COMPARISON_OPERATOR	>
LPAREN	(
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	for
LPAREN	(
VARIABLE_TYPE	int
IDENTIFIER	i
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	1
SEPERATING_SYMBOL	,
IDENTIFIER	j
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	1
TERMINATING_SYMBOL	;
IDENTIFIER	Position_InRange
LPAREN	(
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
SEPERATING_SYMBOL	,
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	i
ARITHMETIC_OPERATOR	+
ARITHMETIC_OPERATOR	+
SEPERATING_SYMBOL	,
IDENTIFIER	j
ARITHMETIC_OPERATOR	+
ARITHMETIC_OPERATOR	+
RPAREN	)
LBRACE	{
VARIABLE_TYPE	int
IDENTIFIER	goX
ASSIGNMENT_OPERATOR	=
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
TERMINATING_SYMBOL	;
VARIABLE_TYPE	int
IDENTIFIER	goY
ASSIGNMENT_OPERATOR	=
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
TERMINATING_SYMBOL	;
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	==
SIGNED_INTEGER	0
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
KEYWORD	else
LBRACE	{
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	!=
IDENTIFIER	team
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	break
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
IDENTIFIER	for
LPAREN	(
VARIABLE_TYPE	int
IDENTIFIER	i
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	1
SEPERATING_SYMBOL	,
IDENTIFIER	j
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	-1
TERMINATING_SYMBOL	;
IDENTIFIER	inRange
LPAREN	(
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
SEPERATING_SYMBOL	,
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	i
ARITHMETIC_OPERATOR	+
ARITHMETIC_OPERATOR	+
SEPERATING_SYMBOL	,
IDENTIFIER	j
ARITHMETIC_OPERATOR	-
ARITHMETIC_OPERATOR	-
RPAREN	)
LBRACE	{
VARIABLE_TYPE	int
IDENTIFIER	goX
ASSIGNMENT_OPERATOR	=
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
TERMINATING_SYMBOL	;
VARIABLE_TYPE	int
IDENTIFIER	goY
ASSIGNMENT_OPERATOR	=
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
TERMINATING_SYMBOL	;
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	==
SIGNED_INTEGER	0
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
KEYWORD	else
LBRACE	{
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	!=
IDENTIFIER	team
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	break
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
IDENTIFIER	for
LPAREN	(
VARIABLE_TYPE	int
IDENTIFIER	i
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	-1
SEPERATING_SYMBOL	,
IDENTIFIER	j
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	1
TERMINATING_SYMBOL	;
IDENTIFIER	Position_inRange
LPAREN	(
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
SEPERATING_SYMBOL	,
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	i
ARITHMETIC_OPERATOR	-
ARITHMETIC_OPERATOR	-
SEPERATING_SYMBOL	,
IDENTIFIER	j
ARITHMETIC_OPERATOR	+
ARITHMETIC_OPERATOR	+
RPAREN	)
LBRACE	{
VARIABLE_TYPE	int
IDENTIFIER	goX
ASSIGNMENT_OPERATOR	=
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
TERMINATING_SYMBOL	;
VARIABLE_TYPE	int
IDENTIFIER	goY
ASSIGNMENT_OPERATOR	=
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
TERMINATING_SYMBOL	;
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	==
SIGNED_INTEGER	0
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
KEYWORD	else
LBRACE	{
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	!=
IDENTIFIER	team
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	break
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
IDENTIFIER	for
LPAREN	(
VARIABLE_TYPE	int
IDENTIFIER	i
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	-1
SEPERATING_SYMBOL	,
IDENTIFIER	j
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	-1
TERMINATING_SYMBOL	;
IDENTIFIER	inRange
LPAREN	(
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
SEPERATING_SYMBOL	,
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	i
ARITHMETIC_OPERATOR	-
ARITHMETIC_OPERATOR	-
SEPERATING_SYMBOL	,
IDENTIFIER	j
ARITHMETIC_OPERATOR	-
ARITHMETIC_OPERATOR	-
RPAREN	)
LBRACE	{
VARIABLE_TYPE	int
IDENTIFIER	goX
ASSIGNMENT_OPERATOR	=
IDENTIFIER	x
ARITHMETIC_OPERATOR	+
IDENTIFIER	i
TERMINATING_SYMBOL	;
VARIABLE_TYPE	int
IDENTIFIER	goY
ASSIGNMENT_OPERATOR	=
IDENTIFIER	y
ARITHMETIC_OPERATOR	+
IDENTIFIER	j
TERMINATING_SYMBOL	;
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	==
SIGNED_INTEGER	0
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
KEYWORD	else
LBRACE	{
KEYWORD	if
LPAREN	(
IDENTIFIER	getPiece
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
COMPARISON_OPERATOR	!=
IDENTIFIER	team
RPAREN	)
IDENTIFIER	go_add
LPAREN	(
IDENTIFIER	new
IDENTIFIER	Position
LPAREN	(
IDENTIFIER	goX
SEPERATING_SYMBOL	,
IDENTIFIER	goY
RPAREN	)
RPAREN	)
TERMINATING_SYMBOL	;
IDENTIFIER	break
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
KEYWORD	return
IDENTIFIER	go
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
