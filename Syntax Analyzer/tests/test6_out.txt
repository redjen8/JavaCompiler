IDENTIFIER	public
IDENTIFIER	static
IDENTIFIER	void
IDENTIFIER	main
LPAREN	(
RPAREN	)
LBRACE	{
VARIABLE_TYPE	int
IDENTIFIER	a
ASSIGNMENT_OPERATOR	=
IDENTIFIER	a_2
ARITHMETIC_OPERATOR	+
ASSIGNMENT_OPERATOR	=
IDENTIFIER	foo
TERMINATING_SYMBOL	;
VARIABLE_TYPE	boolean
IDENTIFIER	t
COMPARISON_OPERATOR	==
ASSIGNMENT_OPERATOR	=
COMPARISON_OPERATOR	==
COMPARISON_OPERATOR	==
ASSIGNMENT_OPERATOR	=
COMPARISON_OPERATOR	==
ASSIGNMENT_OPERATOR	=
ASSIGNMENT_OPERATOR	=
BOOLEAN_STRING	true
SEPERATING_SYMBOL	,
BOOLEAN_STRING	false
TERMINATING_SYMBOL	;
VARIABLE_TYPE	int
IDENTIFIER	tst
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	-1
ARITHMETIC_OPERATOR	-
LPAREN	(
SIGNED_INTEGER	-1
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	1
RPAREN	)
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	-1
ARITHMETIC_OPERATOR	+
SIGNED_INTEGER	-1
ARITHMETIC_OPERATOR	-
LPAREN	(
SIGNED_INTEGER	1
RPAREN	)
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	-1
VARIABLE_TYPE	String
IDENTIFIER	m
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	1
ARITHMETIC_OPERATOR	+
SIGNED_INTEGER	24152
ARITHMETIC_OPERATOR	+
IDENTIFIER	e
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	281
ARITHMETIC_OPERATOR	*
LPAREN	(
SIGNED_INTEGER	1
ARITHMETIC_OPERATOR	/
SIGNED_INTEGER	10000
RPAREN	)
TERMINATING_SYMBOL	;
VARIABLE_TYPE	char
IDENTIFIER	arg
LBRACKET	[
SIGNED_INTEGER	0
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	-256
RBRACKET	]
ASSIGNMENT_OPERATOR	=
SINGLE_CHARACTER	 
SEPERATING_SYMBOL	,
SINGLE_CHARACTER	t
TERMINATING_SYMBOL	;
KEYWORD	return
BOOLEAN_STRING	true
KEYWORD	return
BOOLEAN_STRING	false
TERMINATING_SYMBOL	;
KEYWORD	return
SEPERATING_SYMBOL	,
KEYWORD	return
TERMINATING_SYMBOL	;
KEYWORD	while
LPAREN	(
BOOLEAN_STRING	true
RPAREN	)
LBRACE	{
KEYWORD	if
LPAREN	(
VARIABLE_TYPE	boolean
IDENTIFIER	b
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	31
RPAREN	)
LBRACE	{
KEYWORD	return
KEYWORD	class
IDENTIFIER	temp
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
RBRACE	}
