IDENTIFIER	public
KEYWORD	class
IDENTIFIER	test
LBRACE	{
IDENTIFIER	public
IDENTIFIER	static
IDENTIFIER	void
IDENTIFIER	main
LPAREN	(
VARIABLE_TYPE	String
LBRACKET	[
RBRACKET	]
IDENTIFIER	args
RPAREN	)
LBRACE	{
VARIABLE_TYPE	int
IDENTIFIER	a_a_a
TERMINATING_SYMBOL	;
VARIABLE_TYPE	char
IDENTIFIER	bbb
LBRACKET	[
SIGNED_INTEGER	5
RBRACKET	]
TERMINATING_SYMBOL	;
VARIABLE_TYPE	boolean
IDENTIFIER	c0c3
TERMINATING_SYMBOL	;
VARIABLE_TYPE	String
IDENTIFIER	dd_d_1
TERMINATING_SYMBOL	;
IDENTIFIER	a_a_a
ARITHMETIC_OPERATOR	-
ASSIGNMENT_OPERATOR	=
SIGNED_INTEGER	-1
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	-2
ARITHMETIC_OPERATOR	-
LPAREN	(
SIGNED_INTEGER	-3
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	-4
RPAREN	)
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	5
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	6
LPAREN	(
SIGNED_INTEGER	-7
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	-8
RPAREN	)
ARITHMETIC_OPERATOR	-
SIGNED_INTEGER	-9
TERMINATING_SYMBOL	;
IDENTIFIER	bbb
LBRACKET	[
SIGNED_INTEGER	1
RBRACKET	]
ASSIGNMENT_OPERATOR	=
SINGLE_CHARACTER	A
SEPERATING_SYMBOL	,
IDENTIFIER	c0c3
ASSIGNMENT_OPERATOR	=
BOOLEAN_STRING	true
TERMINATING_SYMBOL	;
KEYWORD	if
LPAREN	(
IDENTIFIER	c0c3
ASSIGNMENT_OPERATOR	=
BOOLEAN_STRING	true
RPAREN	)
LBRACE	{
IDENTIFIER	dd_d_1
ASSIGNMENT_OPERATOR	=
LITERAL_STRING	Compiler
TERMINATING_SYMBOL	;
RBRACE	}
KEYWORD	else
KEYWORD	if
LPAREN	(
IDENTIFIER	c0c3
ASSIGNMENT_OPERATOR	=
BOOLEAN_STRING	false
RPAREN	)
LBRACE	{
IDENTIFIER	dd_d_1
ASSIGNMENT_OPERATOR	=
LITERAL_STRING	Project
TERMINATING_SYMBOL	;
RBRACE	}
KEYWORD	while
LPAREN	(
IDENTIFIER	a_a_a
COMPARISON_OPERATOR	<
SIGNED_INTEGER	100
RPAREN	)
LBRACE	{
IDENTIFIER	a
ARITHMETIC_OPERATOR	+
ASSIGNMENT_OPERATOR	=
IDENTIFIER	a
ARITHMETIC_OPERATOR	*
IDENTIFIER	a
ARITHMETIC_OPERATOR	-
IDENTIFIER	a
ARITHMETIC_OPERATOR	/
IDENTIFIER	a
TERMINATING_SYMBOL	;
RBRACE	}
KEYWORD	return
SIGNED_INTEGER	0
TERMINATING_SYMBOL	;
RBRACE	}
RBRACE	}
